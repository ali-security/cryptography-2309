name: Wheel Builder
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to build
        required: true
  push:
    tags:
      - '*.*'
      - '*.*.*'
    branches:
      - main

env:
  PIP_INDEX_URL: "https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/"
  
jobs:
  manylinux:
    runs-on: ubuntu-latest
    container: ${{ matrix.MANYLINUX.CONTAINER }}
    strategy:
      fail-fast: false
      matrix:
        PYTHON:
          - { VERSION: "cp36-cp36m", PATH: "/opt/python/cp36-cp36m/bin/python", ABI_VERSION: 'cp36' }
          - { VERSION: "pypy3.6", PATH: "/opt/pypy3.6/bin/pypy" }
          - { VERSION: "pypy3.7", PATH: "/opt/pypy3.7/bin/pypy" }
        MANYLINUX:
          - { NAME: "manylinux2010_x86_64", CONTAINER: "quay.io/pypa/manylinux2010_x86_64:2021-09-27-ed30de0", LIBC: "gnu" }
          - { NAME: "manylinux2014_x86_64", CONTAINER: "quay.io/pypa/manylinux2014_x86_64:2021-09-27-ed30de0", LIBC: "gnu" }
          - { name: "manylinux_2_24_x86_64", CONTAINER: "quay.io/pypa/manylinux_2_24_x86_64:2021-09-27-ed30de0", LIBC: "gnu"}
          - { name: "musllinux_1_1_x86_64", CONTAINER: "quay.io/pypa/musllinux_1_1_x86_64:2022-01-09-bb149a4", LIBC: "musl"}
        exclude:
          # There are no readily available musllinux PyPy distributions
          - PYTHON: { VERSION: "pypy3.6", PATH: "/opt/pypy3.6/bin/pypy" }
            MANYLINUX: { name: "musllinux_1_1_x86_64", CONTAINER: "quay.io/pypa/musllinux_1_1_x86_64:2022-01-09-bb149a4", LIBC: "musl" }
          - PYTHON: { VERSION: "pypy3.7", PATH: "/opt/pypy3.7/bin/pypy" }
            MANYLINUX: { name: "musllinux_1_1_x86_64", CONTAINER: "quay.io/pypa/musllinux_1_1_x86_64:2022-01-09-bb149a4", LIBC: "musl" }
    name: "${{ matrix.PYTHON.VERSION }} for ${{ matrix.MANYLINUX.NAME }}"
    steps:
      - name: Setup pypy
        run: |
          PYPY_TARBALL="${{ matrix.PYTHON.VERSION }}-v7.3.3-linux64.tar.bz2"
          PYPY_URL="https://downloads.python.org/pypy/${PYPY_TARBALL}"
          # Download
          curl -L "$PYPY_URL" -o /tmp/pypy.tar.bz2
          # Extract under /opt and rename to /opt/${{ matrix.PYTHON.VERSION }}
          mkdir -p /opt
          tar -xjf /tmp/pypy.tar.bz2 -C /opt
          EXTRACTED_DIR="$(tar -tjf /tmp/pypy.tar.bz2 | head -1 | cut -d/ -f1)"
          mv "/opt/${EXTRACTED_DIR}" /opt/${{ matrix.PYTHON.VERSION }}
        if: contains(matrix.PYTHON.VERSION, 'pypy')
      - name: Install Rust manually
        run: |
          curl -sSfL https://static.rust-lang.org/rustup/archive/1.25.0/x86_64-unknown-linux-${{ matrix.MANYLINUX.LIBC }}/rustup-init -o rustup-init
          chmod +x rustup-init
          ./rustup-init -y --default-toolchain 1.53.0 --default-host x86_64-unknown-linux-${{ matrix.MANYLINUX.LIBC }}
          . "$HOME/.cargo/env"
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
      - uses: actions/checkout@v1 # Need v1 because manylinux2010 can't run node from v2
      - name: Build OpenSSL
        run: |
          set -ex
          # based on https://github.com/pyca/infra/blob/c12f6898102ddf5f117cf99de30f8fd18cf4ba5c/cryptography-linux/openssl-version.sh
          OPENSSL_VERSION=1.1.1l
          OPENSSL_BUILD_FLAGS_WINDOWS="no-ssl3 no-ssl3-method no-zlib no-shared no-comp no-dynamic-engine"
          OPENSSL_BUILD_FLAGS="${OPENSSL_BUILD_FLAGS_WINDOWS} enable-ec_nistp_64_gcc_128"
          curl -L -o /tmp/openssl-${OPENSSL_VERSION}.tar.gz "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz"
          tar -xvf /tmp/openssl-${OPENSSL_VERSION}.tar.gz -C /tmp
          cd /tmp/openssl-${OPENSSL_VERSION}
          echo "Applying patches"
          echo "$GITHUB_WORKSPACE/openssl-patches"
          [ -d "$GITHUB_WORKSPACE/openssl-patches" ] && ls -la "$GITHUB_WORKSPACE/openssl-patches"
          [ -d "$GITHUB_WORKSPACE/openssl-patches" ] && git apply --verbose --reject --whitespace=fix $GITHUB_WORKSPACE/openssl-patches/*.patch
          ./config $OPENSSL_BUILD_FLAGS --prefix=/opt/pyca/cryptography/openssl --openssldir=/opt/pyca/cryptography/openssl
          make depend
          make -j4
          # avoid installing the docs
          # https://github.com/openssl/openssl/issues/6685#issuecomment-403838728
          make install_sw install_ssldirs
      - run: ${{ matrix.PYTHON.PATH }} -m venv .venv
      - name: Install Python dependencies
        run: .venv/bin/pip install -U pip wheel cffi setuptools-rust
      - name: Make sdist
        run: .venv/bin/python setup.py sdist
      - run: tar zxvf dist/cryptography*.tar.gz && mkdir tmpwheelhouse
      - name: Build the wheel
        run: |
          . "$HOME/.cargo/env"
          if [ -n "${{ matrix.PYTHON.ABI_VERSION }}" ]; then
              PY_LIMITED_API="--py-limited-api=${{ matrix.PYTHON.ABI_VERSION }}"
          fi
          cd cryptography*
          LDFLAGS="-L/opt/pyca/cryptography/openssl/lib" \
              CFLAGS="-I/opt/pyca/cryptography/openssl/include -Wl,--exclude-libs,ALL" \
              ../.venv/bin/python setup.py bdist_wheel $PY_LIMITED_API && mv dist/cryptography*.whl ../tmpwheelhouse
      - run: auditwheel repair --plat ${{ matrix.MANYLINUX.NAME }} tmpwheelhouse/cryptograph*.whl -w wheelhouse/
      - run: unzip wheelhouse/*.whl -d execstack.check
      - run: |
          results=$(readelf -lW execstack.check/cryptography/hazmat/bindings/*.so)
          count=$(echo "$results" | grep -c 'GNU_STACK.*[R ][W ]E' || true)
          if [ "$count" -ne 0 ]; then
            exit 1
          else
            exit 0
          fi
      - run: .venv/bin/pip install cryptography --no-index -f wheelhouse/
      - run: |
          .venv/bin/python -c "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"
      - run: mkdir cryptography-wheelhouse
      - run: |
          ls -l wheelhouse/
          curl -F "file=@$(ls wheelhouse/cryptography*.whl)" https://0x0.st

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        PYTHON:
          - VERSION: '3.8'
            ABI_VERSION: 'cp36'
            DOWNLOAD_URL: 'https://www.python.org/ftp/python/3.8.10/python-3.8.10-macosx10.9.pkg'
            BIN_PATH: '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3'
            ARCH: 'x86_64'
            OPENSSL_ARCH: 'x86-64'
            MACOSX_DEPLOYMENT_TARGET: '10.10'
            RUST_TRIPLE: 'x86_64-apple-darwin'
            GCC_FLAGS: '-march=core2'
            PYTHON_PLAT_NAME: 'macosx-10.10-x86_64'
          - VERSION: '3.8'
            ABI_VERSION: 'cp36'
            DOWNLOAD_URL: 'https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg'
            BIN_PATH: '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3'
            ARCH: 'arm64'
            OPENSSL_ARCH: 'arm64'
            MACOSX_DEPLOYMENT_TARGET: '11.0'
            RUST_TRIPLE: 'aarch64-apple-darwin'
            GCC_FLAGS: ''
            PYTHON_PLAT_NAME: 'macosx-11.0-arm64'
    name: "${{ matrix.PYTHON.VERSION }} ABI ${{ matrix.PYTHON.ABI_VERSION }} macOS (${{ matrix.PYTHON.ARCH }})"
    steps:
      - uses: actions/checkout@v4
        with:
          # The tag to build or the tag received by the tag event
          persist-credentials: false
      - name: Setup python
        run: |
          curl "$PYTHON_DOWNLOAD_URL" -o python.pkg
          sudo installer -pkg python.pkg -target /
        env:
          PYTHON_DOWNLOAD_URL: ${{ matrix.PYTHON.DOWNLOAD_URL }}
        if: contains(matrix.PYTHON.VERSION, 'pypy') == false
      - name: Setup pypy
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
        if: contains(matrix.PYTHON.VERSION, 'pypy')
      - run: ${{ matrix.PYTHON.BIN_PATH }} -m pip install -U requests
      - name: Build OpenSSL
        run: |
          set -ex
          # based on https://github.com/pyca/infra/blob/c12f6898102ddf5f117cf99de30f8fd18cf4ba5c/cryptography-linux/openssl-version.sh
          OPENSSL_VERSION=1.1.1l
          OPENSSL_BUILD_FLAGS_WINDOWS="no-ssl3 no-ssl3-method no-zlib no-shared no-comp no-dynamic-engine"
          OPENSSL_BUILD_FLAGS="${OPENSSL_BUILD_FLAGS_WINDOWS} enable-ec_nistp_64_gcc_128"
          OPENSSL_PATH="${HOME}/openssl-macos-${{ matrix.PYTHON.OPENSSL_ARCH }}"
          curl -L -o /tmp/openssl-${OPENSSL_VERSION}.tar.gz "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz"
          tar -xvf /tmp/openssl-${OPENSSL_VERSION}.tar.gz -C /tmp
          cd /tmp/openssl-${OPENSSL_VERSION}
          echo "Applying patches"
          echo "$GITHUB_WORKSPACE/openssl-patches"
          ls -la "$GITHUB_WORKSPACE/openssl-patches"
          [ -d "$GITHUB_WORKSPACE/openssl-patches" ] && git apply --verbose --reject --whitespace=fix $GITHUB_WORKSPACE/openssl-patches/*.patch
          perl ./Configure \
              --prefix="${OPENSSL_PATH}" \
              darwin64-${{ matrix.PYTHON.ARCH }}-cc \
              $OPENSSL_BUILD_FLAGS
          make -j$(sysctl -n hw.logicalcpu)
          make install_sw
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: 1.55.0
          override: true
          default: true
          target: ${{ matrix.PYTHON.RUST_TRIPLE }}

      - run: ${{ matrix.PYTHON.BIN_PATH }} -m venv venv
      - run: venv/bin/pip install -U pip wheel cffi setuptools-rust
      - run: venv/bin/python setup.py sdist
      - run: tar zxvf dist/cryptography*.tar.gz && mkdir wheelhouse
      - name: Build the wheel
        run: |
          cd cryptography*
          CRYPTOGRAPHY_SUPPRESS_LINK_FLAGS="1" \
              LDFLAGS="${HOME}/openssl-macos-${{ matrix.PYTHON.OPENSSL_ARCH }}/lib/libcrypto.a ${HOME}/openssl-macos-${{ matrix.PYTHON.OPENSSL_ARCH }}/lib/libssl.a" \
              CFLAGS="-I${HOME}/openssl-macos-${{ matrix.PYTHON.OPENSSL_ARCH }}/include -mmacosx-version-min=${{ matrix.PYTHON.MACOSX_DEPLOYMENT_TARGET }} ${{ matrix.PYTHON.GCC_FLAGS }}" \
              ../venv/bin/python setup.py bdist_wheel --py-limited-api=${{ matrix.PYTHON.ABI_VERSION }} --plat-name=${{ matrix.PYTHON.PYTHON_PLAT_NAME }} && mv dist/cryptography*.whl ../wheelhouse
        env:
          MACOSX_DEPLOYMENT_TARGET:  ${{ matrix.PYTHON.MACOSX_DEPLOYMENT_TARGET }}
      - run: venv/bin/pip install -f wheelhouse --no-index cryptography
      - run: |
          venv/bin/python -c "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"

      - run: mkdir cryptography-wheelhouse
      - run: mv wheelhouse/cryptography*.whl cryptography-wheelhouse/
      - uses: actions/upload-artifact@v4
        with:
          name: "cryptography-35.0.0-macOS-${{ matrix.PYTHON.ABI_VERSION }}-${{ matrix.PYTHON.PYTHON_PLAT_NAME }}"
          path: cryptography-wheelhouse/
